package org.swpractice.repository.reference;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.swpractice.SWPracticeApplication;
import org.swpractice.model.reference.Reference;
import org.swpractice.model.reference.ReferenceType;

import java.util.Optional;

import static org.assertj.core.util.Throwables.getRootCause;
import static org.junit.jupiter.api.Assertions.*;


@ExtendWith(SpringExtension.class)
@SpringBootTest(classes = SWPracticeApplication.class)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class ReferenceRepositoryTest {

    @Autowired
    private ReferenceRepository referenceRepository;

    @Autowired
    private ReferenceTypeRepository referenceTypeRepository;

    private Reference reference;

    @BeforeAll
    void setup() {
        var id = 5001L;
        Optional<ReferenceType> referenceOptional = referenceTypeRepository.findById(id);

        if (referenceOptional.isPresent()) {
            reference = new Reference();
            reference.setReferenceType(referenceOptional.get());
        } else {
            fail("Expected Reference Type of id " + id);
        }
    }

    @BeforeEach
    void reset() {
        reference.setReference(null);
        reference.setAuthor(null);
    }

    @Test
    /**
     * Do not allow delete of record in parent table that will cause orphan records in child tables of the database.
     */
    void dataIntegrityViolationExceptionThrownWhenDelete() {
        Optional<Reference> result = referenceRepository.findById(6001L);
        assertThrows(DataIntegrityViolationException.class, () -> result.ifPresent(subCategory -> referenceRepository.delete(subCategory)));
    }

    @Test
    /**
     * Allow delete of record in parent table that will NOT cause orphan records in child tables of the database.
     */
    void dataIntegrityViolationExceptionNotThrownWhenDelete() {
        reference.setReference("xxx");
        Reference saved = referenceRepository.save(reference);
        assertDoesNotThrow(() -> referenceRepository.delete(saved));
    }

    @Test
    /**
     * Do not allow entries that exceed maximum allowed length.
     */
    void constraintViolationExceptionThrownWhenSaveReferenceWithLengthExceed() {
        reference.setReferencea");
        expectConstraintViolationExceptionOnSave();
    }

    @Test
    /**
     * Allow entries that does not exceed maximum allowed length.
     */
    void constraintViolationExceptionNotThrownWhenSaveReferenceWithLengthNotExceed() {
        reference.setReference
        assertDoesNotThrow(() -> referenceRepository.save(reference));
    }

    @Test
    /**
     * Do not allow entries that exceed maximum allowed length.
     */
    void constraintViolationExceptionThrownWhenSaveAuthorWithLengthExceed() {
        reference.setReference("yyy");
        reference.setAuthor("1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890a");
        expectConstraintViolationExceptionOnSave();
    }

    @Test
    /**
     * Allow entries that does not exceed maximum allowed length.
     */
    void constraintViolationExceptionNotThrownWhenSaveAuthorWithLengthNotExceed() {
        reference.setReference("zzz");
        reference.setAuthor("1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
        assertDoesNotThrow(() -> referenceRepository.save(reference));
    }

    @Test
    /**
     * Do not allow entries that exceed maximum allowed value.
     */
    void constraintViolationExceptionThrownWhenSaveYearWithValueExceed() {
        reference.setReference("aaa");
        reference.setYear(10000);
        expectConstraintViolationExceptionOnSave();
    }

    @Test
    /**
     * Do not allow entries that below minimum allowed value.
     */
    void constraintViolationExceptionThrownWhenSaveYearWithValueBelow() {
        reference.setReference("aaa");
        reference.setYear(-1);
        expectConstraintViolationExceptionOnSave();
    }

    @Test
    /**
     * Allow entries that do not exceed maximum allowed length.
     */
    void constraintViolationExceptionNotThrownWhenSaveYearWithValueNotExceed() {
        reference.setReference("bbb");
        reference.setYear(9999);
        assertDoesNotThrow(() -> referenceRepository.save(reference));

        reference.setReference("ccc");
        reference.setYear(0);
        assertDoesNotThrow(() -> referenceRepository.save(reference));
    }

    @Test
    /**
     * Do not allow empty values.
     */
    void constraintViolationExceptionThrownWhenSaveNameWithEmptyValue() {
        reference.setReference("");
        expectConstraintViolationExceptionOnSave();
    }

    @Test
    /**
     * Do not allow space-only values.
     */
    void constraintViolationExceptionThrownWhenSaveNameWithSpaceValues() {
        reference.setReference("   ");
        expectConstraintViolationExceptionOnSave();
    }

    private void expectConstraintViolationExceptionOnSave() {
        try {
            referenceRepository.save(reference);
        } catch (Exception e) {
            assertEquals(javax.validation.ConstraintViolationException.class, getRootCause(e).getClass());
            return;
        }
        fail("Expected javax.validation.ConstraintViolationException");
    }
}